version: '3.8'

services:
  # PostgreSQL 資料庫服務
  postgres_db:
    image: postgres:15
    container_name: postgres_db
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: admin
    volumes:
      # 將資料庫資料掛載到本機的 postgres-data 資料夾
      - ./postgres-data:/var/lib/postgresql/data
    ports:
      # 將容器的 5432 port 映射到本機的 5432 port
      - "5432:5432"
    networks:
      - app-network
    restart: unless-stopped

  # MongoDB 資料庫服務
  mongo_db:
    image: mongo:latest
    container_name: mongo_db
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin
    volumes:
      # 將資料庫資料掛載到本機的 mongo-data 資料夾
      - ./mongo-data:/data/db
    ports:
      # 將容器的 27017 port 映射到本機的 27017 port
      - "27017:27017"
    networks:
      - app-network
    restart: unless-stopped

  # 後端 (Flask) 服務
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: backend
    env_file:
      # 使用我們專為 Docker 建立的環境變數檔案
      - ./.env
    volumes:
      # 掛載整個專案目錄到容器的 /app，實現熱加載
      - .:/app
    ports:
      - "5000:5000"
    depends_on:
      # 確保資料庫服務先啟動
      - postgres_db
      - mongo_db
    networks:
      - app-network
    restart: unless-stopped

  # 前端 (React) 服務
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: frontend
    volumes:
      # 掛載前端程式碼，實現熱加載
      - ./frontend:/app/frontend
      # 建立一個匿名 volume 來防止本機的 node_modules 覆蓋容器中的 node_modules
      - /app/frontend/node_modules
    ports:
      - "5173:5173"
    depends_on:
      - backend
    networks:
      - app-network
    restart: unless-stopped

# 定義一個共用的網路，讓所有服務可以互相通訊
networks:
  app-network:
    driver: bridge

